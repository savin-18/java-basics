import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class SortList {
    public static void main(String[] args) {
        List<Integer> list = new ArrayList<>();
       /* list.add(5);
        list.add(6);
        list.add(3);
        list.add(2);
        list.add(4);
        System.out.println("LIST BEOFRE SORTING :"+list);
        Collections.sort(list);
        System.out.println("LIST AFTER SORTING :"+list);
        Collections.reverse(list);
        System.out.println("LIST AFTER REVERSING :"+list);*/

        List<Employee> employeeList = new ArrayList<Employee>();

        employeeList.add(new Employee(1,"Nava",25,33500.00));
        employeeList.add(new Employee(3,"Vishnu",26,34500.00));
        employeeList.add(new Employee(2,"Vijay",27,31000.00));
        employeeList.add(new Employee(6,"Mukesh",28,53500.00));
        employeeList.add(new Employee(4,"Shankar",29,38500.00));
        employeeList.add(new Employee(5,"Manoj",30,43500.00));

       // Collections.sort(employeeList,new MySortList());
        Collections.sort(employeeList, new Comparator<Employee>() {
            @Override
            public int compare(Employee o1, Employee o2) {
                return (int) (o2.getName().compareTo(o1.getName()));
            }
        });
        System.out.println(employeeList);

        System.out.println("LAMDA EXPRESSIONS");
        Collections.sort(employeeList,(o1,o2)-> (int) o1.getAge() - o2.getAge());
        System.out.println(employeeList);
    }
}

class MySortList implements Comparator<Employee>{

    @Override
    public int compare (Employee o1,Employee o2){
        return (int) (o1.getSalary()- o2.getSalary()); //this is for asc order salary
//        return (int) (o2.getSalary()- o1.getSalary()); this is for desc order salary we can customize as per out need
    }
}
